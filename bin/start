#!/usr/bin/env ruby
$PROGRAM_NAME='weeknoteabot'
$stdout.sync = true

require 'bundler/setup'
require 'mail'
require 'thread'

require './lib/message_parser'
require './lib/weeknote_state'

config = File.expand_path('../config.yml', File.dirname(__FILE__))

begin
  email_config = YAML::load_file(config)
rescue Errno::ENOENT => e
  abort "config.yml not found. Use rake config to generate one."
end

@state  = WeeknoteState.new
@incoming = Queue.new
@outgoing = Queue.new
@threads = []

Mail.defaults do
  retriever_method :imap, email_config
end

Thread.abort_on_exception = true
@threads << Thread.new do
  loop do
    # find unread emails, oldest first
    Mail.find(:what => :first, :order => :asc, :keys => ['NOT','SEEN']) do |email, imap, uid|
      @incoming << email
      # mark as read
      imap.uid_store( uid, "+FLAGS", [Net::IMAP::SEEN] )
    end
    sleep(10)
  end
end

@threads << Thread.new do
  loop do
    email = @incoming.pop
    msg = MessageParser.new(email, @state)
    msg.parse
    @outgoing << msg.response if msg.reply?
  end
end

@threads << Thread.new do
  loop do
    email = @outgoing.pop
    
    Mail.deliver do
      from     email[:from]
      to       email[:to]
      subject  email[:subject]
      body     email[:body]

      email[:attachments].each do |attachment_path|
        add_file attachment_path
      end
    end
  end
end

@threads.each(&:join)
